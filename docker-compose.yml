version: "3.3"
services:

  ###############
  # TRANSCODERS #
  ###############

  # Run liquidsoap and create "myradio" stream
  liquidsoap-urkfm:
    command:
    - /conf/urkfm.liq
    - /scripts/transcoder/00-live.liq
    container_name: liquidsoap-urkfm
    image: savonet/liquidsoap:v2.2.5
    networks:
    - default
    restart: unless-stopped
    ports:
    - 9001:9001/tcp
    - 7000:7000/tcp
    - 10000:10000/udp
    - 10001:10001/udp
    - 10002:10002/udp
    - 10003:10003/udp
    - 10004:10004/udp
    volumes:
    - ./example/liquidsoap/:/conf/:ro
    - ./scripts/transcoder/:/scripts/transcoder/:ro
    - data_hls:/tmp/
    - data_liquidsoap:/state/

  liquidsoap-geesteliijk:
    command:
    - /conf/urkfmgeestelijk.liq
    - /scripts/transcoder/00-live.liq
    container_name: liquidsoap-geesteliijk
    image: savonet/liquidsoap:v2.2.5
    networks:
    - default
    restart: unless-stopped
    ports:
    - 9011:9011/tcp
    - 7010:7010/tcp
    - 10010:10010/udp
    - 10011:10011/udp
    volumes:
    - ./example/liquidsoap/:/conf/:ro
    - ./scripts/transcoder/:/scripts/transcoder/:ro
    - data_hls:/tmp/
    - data_liquidsoap:/state/

  ###############
  # SRT SOURCES #
  ###############

  # Feed myradio with an example SRT source (https://modular-station.com/)
  source-omroepflevo:
    command:
    - /usr/bin/ffmpeg
    - -hide_banner
    - -re
    - -i
    - "https://urk.fm/flevo-live.mp3"
    - -vn
    - -f
    - wav
    - -codec:a
    - pcm_s16le
    - "srt://liquidsoap-urkfm:10004"
    container_name: source-omroepflevo
    entrypoint: []
    image: savonet/liquidsoap:v2.2.5
    networks:
    - default
    restart: unless-stopped

  #####################
  # STREAMING SERVERS #
  #####################

  # Icecast
  icecast:
    container_name: icecast
    environment:
    - ICECAST_SOURCE_PASSWORD=secret
    - ICECAST_ADMIN_PASSWORD=secret
    - ICECAST_PASSWORD=secret
    - ICECAST_RELAY_PASSWORD=secret
    - ICECAST_HOSTNAME=icecast
    - ICECAST_MAX_SOURCES=10
    expose:
    - 8000
    image: libretime/icecast:latest
    ports:
    - 8000:8000

  # HLS (nginx)
  hls:
    container_name: hls
    expose:
    - "80"
    image: nginx:alpine
    networks:
    - default
    ports:
    - 8080:8080/tcp
    restart: unless-stopped
    volumes:
    - ./example/nginx/:/etc/nginx/conf.d/:ro
    - data_hls:/hls:ro

  ##############
  # MONITORING #
  ##############

  # Dashboards
  grafana:
    container_name: grafana
    depends_on:
    - prometheus
    environment:
    - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
    - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_LOG_LEVEL=warn
    image: grafana/grafana:latest
    labels:
      org.label-schema.group: "monitoring"
    networks:
    - default
    ports:
    - 3000:3000/tcp
    restart: unless-stopped
    volumes:
    - ./example/grafana/provisioning:/etc/grafana/provisioning:ro
    - data_grafana:/var/lib/grafana

  # Collector
  prometheus:
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.console.libraries=/etc/prometheus/console_libraries'
    - '--web.console.templates=/etc/prometheus/consoles'
    - '--storage.tsdb.retention.time=200h'
    - '--web.enable-lifecycle'
    - '--log.level=warn'
    container_name: prometheus
    image: prom/prometheus:latest
    labels:
      org.label-schema.group: "monitoring"
    networks:
    - default
    restart: unless-stopped
    ports:
    - 9090:9090/tcp
    volumes:
    - ./example/prometheus/:/etc/prometheus/:ro
    - data_prometheus:/prometheus

  # Alerting
  # alertmanager:
  #   command:
  #   - '--config.file=/etc/alertmanager/config.yml'
  #   - '--storage.path=/alertmanager'
  #   - '--log.level=warn'
  #   container_name: alertmanager
  #   depends_on:
  #   - prometheus
  #   expose:
  #   - 9093:9093/tcp
  #   image: prom/alertmanager:latest
  #   labels:
  #     org.label-schema.group: "monitoring"
  #   networks:
  #   - default
  #   restart: unless-stopped
  #   volumes:
  #   - ./example/alertmanager:/etc/alertmanager

  # Container / system metrics
  # cadvisor:
  #   container_name: cadvisor
  #   depends_on:
  #   - redis
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   ports:
  #   - 8081:8080/tcp
  #   volumes:
  #   - /:/rootfs:ro
  #   - /var/run:/var/run:rw
  #   - /sys:/sys:ro
  #   - /var/lib/docker/:/var/lib/docker:ro
  # redis:
  #   container_name: redis
  #   image: redis:latest
  #   ports:
  #   - 6379:6379

  #########
  # TESTS #
  #########

volumes:
  data_grafana: {}
  data_hls: {}
  data_liquidsoap: {}
  data_prometheus: {}
